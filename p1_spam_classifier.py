# -*- coding: utf-8 -*-
"""P1_Spam_Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1owt4s9JS6ENpYe8cEzLo4pIkMciHFmZi

#### Based on Stemming,Bag of words, NB Classifier
"""

import pandas as pd

messages = pd.read_csv('SMSSpamCollection', sep = '\t', names = ['label', 'message'])

messages

"""####Data cleaning and processing####"""

import re
import nltk
nltk.download('stopwords')

from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
corpus = []

for i in range(0, len(messages)):                          #(0,5572)
  review = re.sub('[^a-zA-Z]', ' ', messages['message'][i])   # remove all characters xcept a-zA-z sentence wise
  review = review.lower()
  review = review.split()   # To get list of words

  review = [ps.stem(word) for word in review if word not in stopwords.words('english')]
  review = ' '.join(review)
  corpus.append(review)

corpus

"""### Creating Bag of Words model"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 5000) # toselect frequent 5000 words
X = cv.fit_transform(corpus).toarray()    # X is messages

y = pd.get_dummies(messages['label'])  # y is for label spam/ham here we convert it into 2 columns (0/1)
y = y.iloc[:,1].values                # instead of having 2 cols of spam and ham we can get result by only having spam(0/1)

"""### Train Test Split"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

"""### Training model using Naive bayes classifier"""

from sklearn.naive_bayes import MultinomialNB        # works well for nlp
spam_detect_model = MultinomialNB().fit(X_train, y_train)

y_pred = spam_detect_model.predict(X_test)

# To compare actual and predicted results

from sklearn.metrics import confusion_matrix 
confusion_m = confusion_matrix(y_test, y_pred)
confusion_m

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)
accuracy